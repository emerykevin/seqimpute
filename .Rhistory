# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 150)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Load ggplot2
library(ggplot2)
# Plot the data
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +                                         # Plot points
geom_smooth(method = "lm", se = FALSE, aes(group = Gender), fullrange = TRUE) +  # Extend regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# realtistic example ####
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 170)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Load ggplot2
library(ggplot2)
# Plot the data
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +                                         # Plot points
geom_smooth(method = "lm", se = FALSE, aes(group = Gender), fullrange = TRUE) +  # Extend regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# realtistic example ####
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 200)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Load ggplot2
library(ggplot2)
# Plot the data
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +                                         # Plot points
geom_smooth(method = "lm", se = FALSE, aes(group = Gender), fullrange = TRUE) +  # Extend regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# realtistic example ####
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 210)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Load ggplot2
library(ggplot2)
# Plot the data
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +                                         # Plot points
geom_smooth(method = "lm", se = FALSE, aes(group = Gender), fullrange = TRUE) +  # Extend regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 150)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Manually define regression lines based on the provided model
# Generate data points for the lines (covering full x-axis range)
line_data <- data.frame(
Seniority = rep(seq(0, 30, length.out = 100), 2),  # X values from 0 to 30
Gender = rep(c("female", "male"), each = 100),     # Separate by gender
Salary = c(4169.38 + (-358.03) * 1 + 25.15 * seq(0, 30, length.out = 100),  # Female line
4169.38 + (-358.03) * 0 + 25.15 * seq(0, 30, length.out = 100))  # Male line
)
# Load ggplot2
library(ggplot2)
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# realtistic example ####
# Set seed for reproducibility
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 210)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Manually define regression lines based on the provided model
# Generate data points for the lines (covering full x-axis range)
line_data <- data.frame(
Seniority = rep(seq(0, 30, length.out = 100), 2),  # X values from 0 to 30
Gender = rep(c("female", "male"), each = 100),     # Separate by gender
Salary = c(4169.38 + (-358.03) * 1 + 25.15 * seq(0, 30, length.out = 100),  # Female line
4169.38 + (-358.03) * 0 + 25.15 * seq(0, 30, length.out = 100))  # Male line
)
# Load ggplot2
library(ggplot2)
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 220)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "female", "male")
)
# Manually define regression lines based on the provided model
# Generate data points for the lines (covering full x-axis range)
line_data <- data.frame(
Seniority = rep(seq(0, 30, length.out = 100), 2),  # X values from 0 to 30
Gender = rep(c("female", "male"), each = 100),     # Separate by gender
Salary = c(4169.38 + (-358.03) * 1 + 25.15 * seq(0, 30, length.out = 100),  # Female line
4169.38 + (-358.03) * 0 + 25.15 * seq(0, 30, length.out = 100))  # Male line
)
# Load ggplot2
library(ggplot2)
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "Simulated Salary vs Seniority by Gender",
x = "Seniority",
y = "Salary",
color = "Gender") +
theme_minimal() +
theme(legend.text = element_text(size = 14))  # Increase legend text size
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "",
x = "Seniority",
y = "Salary",
color = "") +
theme_minimal() +
plot_theme  # Increase legend text size
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "women", "men")
)
levels(data$Gender)
# realtistic example ####
# Set seed for reproducibility
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 220)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "woman", "man")
)
data$Gender <- factor(data$Gender, levels=c("woman","man"))
# Manually define regression lines based on the provided model
# Generate data points for the lines (covering full x-axis range)
line_data <- data.frame(
Seniority = rep(seq(0, 30, length.out = 100), 2),  # X values from 0 to 30
Gender = rep(c("woman", "man"), each = 100),     # Separate by gender
Salary = c(4169.38 + (-358.03) * 1 + 25.15 * seq(0, 30, length.out = 100),  # Female line
4169.38 + (-358.03) * 0 + 25.15 * seq(0, 30, length.out = 100))  # Male line
)
# Load ggplot2
library(ggplot2)
plot_theme <- theme(
plot.title = elemant_text(size = 20, face = "bold"),
axis.title = elemant_text(size = 15),
axis.text = elemant_text(size = 15),
legend.text = elemant_text(size = 15)
)
# realtistic example ####
# Set seed for reproducibility
# Set seed for reproducibility
set.seed(1)
# Define the number of total data points
n <- 60
# Generate twice as many points in the first half of the x-range
n_first_half <- round(2 * n / 3)  # Two-thirds of points for 0-15
n_second_half <- n - n_first_half  # Remaining points for 15-30
# Generate seniority values
seniority_first_half <- runif(n_first_half, min = 0, max = 15)  # Points between 0 and 15
seniority_second_half <- runif(n_second_half, min = 15, max = 30)  # Points between 15 and 30
seniority <- c(seniority_first_half, seniority_second_half)  # Combine both halves
# Assign gender (1 for female, 0 for male)
gender <- sample(c(0, 1), n, replace = TRUE)
# Define regression coefficients
intercept <- 4169.38
beta_gender <- -358.03
beta_seniority <- 25.15
# Generate the predicted salary based on the regression equation
predicted_salary <- intercept + beta_gender * gender + beta_seniority * seniority
# Add random error to simulate real-world data
error <- rnorm(n, mean = 0, sd = 220)  # random error with standard deviation of 150
salary <- predicted_salary + error
# Create a data frame
data <- data.frame(
Seniority = seniority,
Salary = salary,
Gender = ifelse(gender == 1, "woman", "man")
)
data$Gender <- factor(data$Gender, levels=c("woman","man"))
# Manually define regression lines based on the provided model
# Generate data points for the lines (covering full x-axis range)
line_data <- data.frame(
Seniority = rep(seq(0, 30, length.out = 100), 2),  # X values from 0 to 30
Gender = rep(c("woman", "man"), each = 100),     # Separate by gender
Salary = c(4169.38 + (-358.03) * 1 + 25.15 * seq(0, 30, length.out = 100),  # Female line
4169.38 + (-358.03) * 0 + 25.15 * seq(0, 30, length.out = 100))  # Male line
)
# Load ggplot2
library(ggplot2)
plot_theme <- theme(
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15),
legend.text = element_text(size = 15)
)
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "",
x = "Seniority",
y = "Salary",
color = "") +
theme_minimal() +
plot_theme  # Increase legend text size
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +
labs(title = "",
x = "Seniority",
y = "Salary",
color = "") +
theme_minimal() +
plot_theme  # Increase legend text size
# Plot the data with manual regression lines
ggplot(data, aes(x = Seniority, y = Salary, color = Gender)) +
geom_point(size = 3) +  # Plot points
geom_line(data = line_data, aes(x = Seniority, y = Salary, color = Gender), size = 1) +  # Add manual regression lines
labs(title = "",
x = "Seniority",
y = "Salary",
color = "") +
theme_minimal() +
plot_theme  # Increase legend text size
37.6+37.6+118+174
## Loading the 'actcal' example data set
## and defining a sequence object with
## activity statuses from Jan. to Dec. 2000 (columns 13 to 24)
## of first 100 cases.
data(actcal)
actcal.seq <- seqdef(actcal[1:100,13:24],
labels=c("> 37 hours", "19-36 hours", "1-18 hours", "no work"))
library("TraMineR")
## Loading the 'actcal' example data set
## and defining a sequence object with
## activity statuses from Jan. to Dec. 2000 (columns 13 to 24)
## of first 100 cases.
data(actcal)
actcal.seq <- seqdef(actcal[1:100,13:24],
labels=c("> 37 hours", "19-36 hours", "1-18 hours", "no work"))
## Plotting the sequences frequency,
## the states distribution
## and the legend
par(mfrow=c(2,2))
seqIplot(actcal.seq, sortv="from.start", with.legend=FALSE)
seqfplot(actcal.seq, pbarw=TRUE, with.legend=FALSE)
seqdplot(actcal.seq, with.legend=FALSE)
seqlegend(actcal.seq)
dev.off()
seqlegend(actcal.seq)
View(actcal.seq)
?seqlegend
library("TraMineR")
?seqdef
library("mice")
?as.mids
?mice
data(gameadd)
library("seqimpute")
data(gameadd)
View(gameadd)
data(mvad)
?seqdef
tmp <- seqdef(mvad,var=17:86)
View(tmp)
table(tmp[,4])
tmp[tmp[,4]=="joblessness",5] <- NA
seqimpute(tmp,np=1,nf=1,timing=T,frame.radius = 0)
seqimpute(tmp,np=1,nf=0,timing=T,frame.radius = 0)
table(is.na(tmp[,5]),tmp[,4])
library("seqimpute")
data(mvad)
tmp <- mvad[,17:86]
table(tmp[,4])
tmp[tmp[,4]=="joblessness",5] <- NA
seqimpute(tmp,np=1,nf=0,timing=T,frame.radius = 0)
setwd("C:/Users/Kevin/Documents/seqimpute")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
?check
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_github_links()
revdepcheck::revdep_check(num_workers = 4)
install.packages(revdepcheck)
install.packages("revdepcheck")
revdepcheck::revdep_check(num_workers = 4)
library("revdepcheck")
install.packages("revdepcheck")
library("remotes")
remotes::install_github("r-lib/revdepcheck")
revdepcheck::revdep_check(num_workers = 4)
